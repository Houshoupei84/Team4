一.设计加密码猫模块

   1. 数据结构

   2. 存储定义

   3. 可调用函数

   4. 算法伪代码

二. 需求

   1. 链上存储加密猫数据

   2. 链上遍历所有加密猫

   3. 每只猫都有自己的dna，为128bit的数据

   4. 设计如何生成dna (伪代码算法）

   5. 每个用户可以拥有零到多只猫

   6. 每只猫只有一个主人

   7. 链上遍历用户拥有的所有猫
   
==========================================================================================

总体设计思路。
1. 需要能遍历所有的用户
2. 每遍历到一个用户，可以遍历属于他的所有猫
3. dna的生成算法，应该有 父 + 母 的dna，然后可以再考虑加点其它因素。
4. 因为遍历数据，都是遍历链上的数据，出于以下原因，所有数据都用map类型的变量保存。

下面的文字是在substrate加密猫开发文档中看到的。
在 runtime 开发中，列表循环通常是坏事。如果没有明确对其防范，枚举一个列表的 runtime 函数会增加 O(N) 的复杂度，但是仅仅花费了 O(1) 的费用。
结果就是你的链变得容易被攻击。并且，如果你所枚举的列表过大甚至是无限的，你的 runtime 可能需要比区块生成的间隔更多的时间。这意味着区块生产者不能正常地生产区块！

基于上述原因，本教程在 runtime 逻辑中不会使用任何列表循环。如果你选择使用，请确保已经考虑清楚。
作为替代，我们可以使用映射和计数器模拟列表，
 
=====================================================================================

enum Sex {
    Male,
    Female,
}

struct Kitty {
	id: u128,
	master_address: String,    
    color: String,
	sex: Sex,
    dna: u128,
	price: u64,
}

struct User {
	account_id: u128,
	address: String,
	kitties: map( kitty_id,  struck Kitty),  //包含当前用户所有的猫
}

//存储所有用户
 users: map( account_id, User ); 
 
 //遍历一个用户所拥有的猫
 fn list_kitties_of_user( user ) ;
 {
	//遍历 user.kitties
 }
 
 遍历所有的猫
 fn list_all_kitties( users ) ;
 {
	//遍历 变量 map users ，得到每个具体的 user
	//然后调用 list_kitties_of_user(user) 
 }
 
 //要有创世公猫和母猫
 fn gen_dna(father: struck Kitty, mather: struct Kitty, others其它当时区块的某个随机数据)
 {
	hash ( father.dna + mother.dna + 当前区块的某些随机性数据，比如当前区块地址 + 也可以加上当前猫拥有者的一些信息，比如公私匙），
	结果取128位。
 }
 
 

 
