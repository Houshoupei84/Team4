一.设计加密码猫模块

   1. 数据结构

   2. 存储定义

   3. 可调用函数

   4. 算法伪代码

二. 需求

   1. 繁殖小猫

   2. 选择两只现有的猫作为父母

   3. 小猫必须继承父母的基因

   4. 同样的父母生出来的小猫不能相同

2. create 这里面的kitties_count有溢出的可能性，修复这个问题
   
==========================================================================================

总体设计思路。

   1. 繁殖小猫
	选择两只现有的猫作为父母
	小猫必须继承父母的基因
	同样的父母生出来的小猫不能相同
	
	这些需求，我在第二课的设计中就考虑到了。本节课的作业，这点就不做设计了。

2. 修复 kitties_count  的溢出问题。

	因为猫有价格，那么就是基因决定了这只猫的价格， 如果某些猫不值钱，这些猫的id可以被收回重新繁育，前提是这只猫属于当前打算繁育新猫的主人。
	
	当 kitties_count 达到最大值时，提示用户不能直接繁育新的小猫，可以指定一个旧的小猫，重新繁育，同时旧的小猫数据不在存在。否则就退出什么都不做。
	


	define KITTY_MAX_COUNT = 4294967295;
	
	if( kitties_count == KITTY_MAX_COUNT ){
		if( 用户是否愿意覆盖某只旧有的小猫){
			//用户指定某只旧有的小猫，得到这只猫的 kitties_count_id
			Kittes::set(kitties_count_id, kitty);
		}
		else
			什么都不做，退出；
	}
	else{
		//直接插入一只新的小猫
	}
	
// 上面这段代码放在dna计算之前，如果用户不打算生成小猫了，能避免一些不必要的计算。

上面的设计感觉更合理一些，目前这个版本，超出最大值时，什么都不做。

3.额外作业

解释如何在链上实现（伪）随机数？对比不同方案的优缺点
   
一. 让可信第三方为合约提供随机数

第一种是让可信第三方为合约提供随机数，这种情况通常是中心化的解决方案，通过一个可信的oracle来提供独立的随机数源。智能合约发送请求给独立于区块链系统之外的Oracle，当Oracle监听到链上相关请求后，生成随机数并调用回调函数将结果返回区块链。
这个方案的主要问题式是中心化的解决方案，与基于区块链的分布式精神相悖，另外还有其他的弱点，比如信息在p2p网络中传递过程中的延时问题，对于不同等级的应用需求没法提供差异化的服务等。

二. 交互式的commit 和reveal

第二种是交互式的commit 和reveal。参与过程的多方预先commit一个随机数，然后将hash递交到区块链上。所有参与方都递交完毕后，各方reveal自己的随机数，通过将各自的随机数合并产生一个最终的随机数。这个过程能够保证随机数不被预先知道。但是这个过程有几个问题，第一是需要交互式的多次通讯，自动化实现起来非常困难。第二是如果某方在对自己结果不利的情况下，可以采用不reveal自己随机数来延迟随机数的流程。特别是在参与方比较多的情况下，正确处理好网络的延迟和故意的攻击比较困难。


三. 采用链上的公开信息

第三种是采用链上的公开信息，比如使用区块的哈希值/时间戳/难度系数等作为随机数源。一般情况下，应用需要使用将来的某个区块的哈希值以保证在这个区块出来之前，准备操作已经固定且无法修改。这种方式是在实际中被采用最多的方法，但在实现的过程中有很多陷阱。而且，即使实现的过程完美无瑕，还是有个无法克服的漏洞是，产生区块的矿工，可以通过允许范围内的操作，来改变区块的哈希值，使得产生的随机数偏向矿工的选择。最简单的方式，是通过有选择性地打包交易，使得哈希值对自己有利。

四. 阈值签名

第四种是从共识层，通过阈值签名的方式，使得每个共识节点递交各自对某个信息的签名片段，在足够多的签名片段收集到之后，任何一个共识节点都可以将签名片段合并成一个合法的可验证的签名。这个签名可以作为随机数源。
这个做法的好处是矿工没法对最终的签名进行可操作的修改。对于同一个信息message，不同的矿工签名组合出来的结果都是一致的。一旦message确定，签名也就确定了。Dfinity采用这个方式作为其共识协议的基础，同时提供可验证的随机数源。但是这里有个问题是在每一轮区块产生的过程中，每个节点需要广播自己的签名片段，这样使得每轮消息的传递是O(n2)，类似于PBFT。这个问题会导致共识的节点数量的限制，以及可支撑的应用效率等。

 
 

 
